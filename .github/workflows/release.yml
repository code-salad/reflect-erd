# This workflow runs tests and publishes releases automatically on pushes to alpha
# It uses semantic-release for automated versioning and publishing

name: CI/CD Pipeline

on:
  release:
    types: [published]
  push:
    branches: [alpha]

jobs:
  run-tests:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use NodeJS v20.15.0
        uses: actions/setup-node@v3
        with:
          node-version: 20.15.0
          registry-url: https://registry.npmjs.org/
      - name: Install Dependencies
        run: npm install
      - run: curl -sfS https://dotenvx.sh/install.sh | sh
        env:
          DOTENV_PRIVATE_KEY_CI: ${{ secrets.DOTENV_PRIVATE_KEY_CI }}
      - name: Verify Docker and Docker Compose
        run: |
          docker --version
          docker compose version
      - name: Lint and Test
        run: |
          dotenvx run -f .env.ci -- npm run lint
      - name: Run End-to-End Tests  
        run: npm run test:ee

  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: run-tests
    if: github.ref == 'refs/heads/alpha'
    permissions:
      contents: write
      id-token: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 20.15.0
          registry-url: https://registry.npmjs.org/
      - name: Install dependencies
        run: npm install
      - name: Run semantic-release
        run: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

#   docker-build-push-tag:
#     name: Push Tagged Image
#     if: github.event.release.target_commitish == 'alpha' && vars.DOCKERHUB_USERNAME != ''
#     runs-on: ubuntu-latest
#     needs: run-tests
#     steps:
#       - name: Login to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}
#       - name: Checkout the repository
#         uses: actions/checkout@v3
#         with:
#           ref: ${{ github.event.release.tag_name }}

#       - name: Set release version number
#         run: sed -i -e "s/latest/${{ github.event.release.tag_name }}/g" docker-compose.dev.yml

#       - name: Build Image
#         run: |
#           cp .env.example .env
#           docker compose -f docker-compose.dev.yml build

#       - name: Push Image to Docker Hub
#         run: docker compose -f docker-compose.dev.yml push

#   docker-build-push:
#     name: Push Development Image
#     if: github.event.release.target_commitish == 'alpha' && vars.DOCKERHUB_USERNAME != ''
#     runs-on: ubuntu-latest
#     needs: run-tests
#     steps:
#       - name: Login to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}

#       - name: Checkout the repository
#         uses: actions/checkout@v3
#         with:
#           ref: ${{ github.event.release.tag_name }}

#       - name: Build Image
#         run: |
#           cp .env.example .env
#           docker compose -f docker-compose.dev.yml build

#       - name: Push Image to Docker Hub
#         run: docker compose -f docker-compose.dev.yml push